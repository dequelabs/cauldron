language: en-US
tone_instructions: You must communicate respectfully, succinctly, and with a helpful attitude.
early_access: false
reviews:
  profile: chill
  high_level_summary: false
  high_level_summary_placeholder: '@coderabbitai summary'
  high_level_summary_in_walkthrough: true
  auto_title_placeholder: '@coderabbitai'
  changed_files_summary: false
  sequence_diagrams: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: false
  auto_apply_labels: false
  suggested_reviewers: true
  auto_assign_reviewers: false
  poem: true
  labeling_instructions: []
  path_filters: []
  path_instructions:
    - path: "packages/react/src/components/!(*.*).tsx"
      instructions: |
        Review the React components to ensure they:
        - Use well-structured semantic markup over aria-* attributes
        - Follow consistent patterns in their props API compared to other components
        - Are consistent within the file (e.g. use `ReactNode` consistently instead of a mixture of `ReactNode` and `React.ReactNode`)
        - Support customizing text labels or content in order to support translations
        - Primitive ("building block" components like `Button` and `Link`) and Pattern Components (components that compose other components like `Accordion` and `Alert`) should always use `React.forwardRef` to provide direct access to the component's primary element
        - Include a `displayName`
        - Are function-based (i.e. do not use class components)
        - Are named using Pascal case
        - Include Typescript types for component props
        - Polymorphic components support using `as` property, providing the capability for components to render as a different component under the hood
        - Require a value or provide a default value when accepting an accessible name prop
        - Require or generate an id automatically when the component needs an id for aria relationships
    - path: "packages/styles/**/*.css"
      instructions: |
        Review the CSS files to ensure they:
        - Don't specify units for zero values, e.g. padding: 0px;, instead you can omit the unit, e.g. padding: 0;
        - Avoid using CSS prefixes (e.g. -webkit or -moz) unless absolutely necessary.
        - Use BEM for class naming
          - Styles always start with the component name, upper-cased (e.g. `.Calendar`)
          - Blocks within a component, such as a date within a calendar, should be delimited by two underscores (e.g. `.Calendar__date`)
          - Modifiers, such as variants or states, are delimited by two dashes (e.g. `.Calendar--variant-large`)
          - Multiple words in element names should be separated by hyphens, not underscores (e.g., `SectionHeader__text-section` not `SectionHeader__textSection`)
        - Define component-specific variables in component-specific CSS files (e.g. `calendar.css`) and NOT in the global variables file (i.e. `variables.css`)
        - Use descriptive variable names to make sure the intended usage is clear (e.g. `--button-background-color-primary`)
        - Use CSS variables instead of a hard-coded value when reasonable to do. A fallback value can be provided. (e.g. `min-width: var(--button-min-width, 100px)`)
        - Include light variable values in the `:root` scope and place dark variable values in a `.cauldron-theme-dark` scope
        - Use `#fff` instead of `--white`
    - path: "packages/styles/variables.css"
      instructions: |
        Review this global CSS variables file to ensure:
        - No new text size variables are added--these are now all defined in typography.css
    - path: "packages/react/src/components/Icon/icons/**/*.svg"
      instructions: |
        Review the SVG files to ensure they:
        - Use the `currentColor` attribute for `fill`, `stroke`, or any other color related attributes
        - Do not have any namespace attributes like `xlmns:*`
    - path: "packages/react/src/components/*.test.tsx"
      instructions: |
        Review the component tests to ensure they:
        - Test for all variants (e.g. default, primary, secondary) that are supported by the component
        - Test relevant interactive states (e.g. focus, expanded, disabled)
        - Test different behaviors for functionality related to different layouts (e.g. responsiveness, media queries, overflow)
        - Test all the props, including even handlers that can be passed in to the component
        - Run axe against various variants and states
        - Follow best practices of React Testing Library, in particular:
          - Use `screen` instead of `render`
          - Use the proper query for the situation
          - Query by role when possible
          - Query by text only when a role is not available
          - Only use query* variants when checking non-existence
          - Use userEvent to simulate events
          - Use find* when possible, rather than waitFor
          - Use explicit assertions with get* variants
    - path: "docs/pages/components/**/*.mdx"
      instructions: |
        Review the component documentation to ensure:
        - When applicable, a "Related Components" section is present and related components are listed.
        - Single types should be represented as strings without being wrapped in arrays (e.g., use `type: 'ReactNode'` instead of `type: ['ReactNode']`)
        - Every property is documented
        - Consistency in type declarations across all component properties
        - Documentation examples match the actual component implementation

  abort_on_close: true
  disable_cache: false
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: false
    base_branches: []
  finishing_touches:
    docstrings:
      enabled: true
  tools:
    shellcheck:
      enabled: true
    ruff:
      enabled: false
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 90000
    languagetool:
      enabled: true
      enabled_rules: []
      disabled_rules: []
      enabled_categories: []
      disabled_categories: []
      enabled_only: false
      level: default
    biome:
      enabled: false
    hadolint:
      enabled: false
    swiftlint:
      enabled: false
    phpstan:
      enabled: false
      level: default
    golangci-lint:
      enabled: false
    yamllint:
      enabled: true
    gitleaks:
      enabled: false
    checkov:
      enabled: true
    detekt:
      enabled: false
    eslint:
      enabled: false
    rubocop:
      enabled: false
    buf:
      enabled: false
    regal:
      enabled: false
    actionlint:
      enabled: true
    pmd:
      enabled: false
    cppcheck:
      enabled: false
    semgrep:
      enabled: false
    circleci:
      enabled: false
    sqlfluff:
      enabled: false
    prismaLint:
      enabled: false
    oxc:
      enabled: false
    shopifyThemeCheck:
      enabled: false
chat:
  auto_reply: true
  create_issues: true
  integrations:
    jira:
      usage: auto
    linear:
      usage: auto
knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    usage: auto
    project_keys: []
  linear:
    usage: auto
    team_keys: []
  pull_requests:
    scope: auto
code_generation:
  docstrings:
    language: en-US
    path_instructions: []
